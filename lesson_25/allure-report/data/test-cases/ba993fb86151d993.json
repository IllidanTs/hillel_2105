{"uid":"ba993fb86151d993","name":"test_delete_data","fullName":"test_db_operations#test_delete_data","historyId":"d5adce02442f883378e62d86a2251b53","time":{"start":1726023162775,"stop":1726023166880,"duration":4105},"status":"broken","statusMessage":"psycopg2.OperationalError: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061)\n\tIs the server running on that host and accepting TCP/IP connections?\nconnection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061)\n\tIs the server running on that host and accepting TCP/IP connections?","statusTrace":"@allure.feature('Database Tests')\n    def test_delete_data():\n>       conn = psycopg2.connect(os.getenv('DATABASE_URL'))\n\ntest_db_operations.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndsn = '', connection_factory = None, cursor_factory = None, kwargs = {}, kwasync = {}\n\n    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n        \"\"\"\n        Create a new database connection.\n    \n        The connection parameters can be specified as a string:\n    \n            conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n    \n        or using a set of keyword arguments:\n    \n            conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n    \n        Or as a mix of both. The basic connection parameters are:\n    \n        - *dbname*: the database name\n        - *database*: the database name (only as keyword argument)\n        - *user*: user name used to authenticate\n        - *password*: password used to authenticate\n        - *host*: database host address (defaults to UNIX socket if not provided)\n        - *port*: connection port number (defaults to 5432 if not provided)\n    \n        Using the *connection_factory* parameter a different class or connections\n        factory can be specified. It should be a callable object taking a dsn\n        argument.\n    \n        Using the *cursor_factory* parameter, a new default cursor factory will be\n        used by cursor().\n    \n        Using *async*=True an asynchronous connection will be created. *async_* is\n        a valid alias (for Python versions where ``async`` is a keyword).\n    \n        Any other keyword parameter will be passed to the underlying client\n        library: the list of supported parameters depends on the library version.\n    \n        \"\"\"\n        kwasync = {}\n        if 'async' in kwargs:\n            kwasync['async'] = kwargs.pop('async')\n        if 'async_' in kwargs:\n            kwasync['async_'] = kwargs.pop('async_')\n    \n        dsn = _ext.make_dsn(dsn, **kwargs)\n>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\nE       psycopg2.OperationalError: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061)\nE       \tIs the server running on that host and accepting TCP/IP connections?\nE       connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061)\nE       \tIs the server running on that host and accepting TCP/IP connections?\n\nC:\\Users\\99car\\PycharmProjects\\hillel_2105\\.venv\\Lib\\site-packages\\psycopg2\\__init__.py:122: OperationalError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"feature","value":"Database Tests"},{"name":"suite","value":"test_db_operations"},{"name":"host","value":"DESKTOP-VG2FJ8U"},{"name":"thread","value":"20140-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_db_operations"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"ba993fb86151d993.json","parameterValues":[]}